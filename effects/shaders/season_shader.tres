[gd_resource type="VisualShader" load_steps=14 format=3 uid="uid://o1ssx2ckepn0"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_in0m2"]
output_port_for_preview = 0
size = Vector2(220, 360)
expression = "out = pow(sin(fma(20.,in,1.*TIME)),4) * 0.2 + 0.1;"

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_xw18n"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(1, 1), 2, Vector2(0, 0)]
op_type = 1

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_etv6d"]
function = 31

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_3inrk"]
output_port_for_preview = 0
op_type = 0

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_vsu8i"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.0, 2, 0.0, 3, 0.0]
expanded_output_ports = [0]
op_type = 2

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_3gmuh"]
output_port_for_preview = 0
expanded_output_ports = [0]
size = Vector2(640, 660)
expression = "if (weather >= 3 or (-1 <= weather and weather < 0)) {
		colour = vec4(1);//mix(summer,autumn,fract(weather));
} else if (weather < 0.995) {
		colour = vec4(0.5);//mix(autumn,winter,fract(weather));
} else if (weather < 1.995) {
		colour = vec4(0.2);//mix(winter,spring,fract(weather));
} else if (weather < 2.995) {
		colour = vec4(0.5);// mix(spring,summer,fract(weather));
};"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_takvu"]
parameter_name = "weather"
qualifier = 1

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_glk66"]
constant = Color(1, 1, 1, 0)

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_mhea2"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_giw4c"]
expanded_output_ports = [0]
constant = Color(1, 1, 0.403922, 1)

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ghkgo"]
output_port_for_preview = 0
expanded_output_ports = [0]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec2Constant" id="VisualShaderNodeVec2Constant_acvkv"]
output_port_for_preview = 0
constant = Vector2(0.367, -0.114)

[sub_resource type="VisualShaderNodeDotProduct" id="VisualShaderNodeDotProduct_vijyk"]
output_port_for_preview = 0

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

global uniform float weather;



void fragment() {
// FloatParameter:27
	float n_out27p0 = weather;


// ColorConstant:3
	vec4 n_out3p0 = vec4(1.000000, 1.000000, 0.403922, 1.000000);
	float n_out3p1 = n_out3p0.r;
	float n_out3p2 = n_out3p0.g;
	float n_out3p3 = n_out3p0.b;


// Input:6
	vec2 n_out6p0 = UV;
	float n_out6p1 = n_out6p0.r;
	float n_out6p2 = n_out6p0.g;


// FloatFunc:16
	float n_out16p0 = 1.0 - n_out6p2;


// VectorCompose:17
	vec2 n_out17p0 = vec2(n_out6p1, n_out16p0);


// Vector2Constant:7
	vec2 n_out7p0 = vec2(0.367000, -0.114000);


// MultiplyAdd:15
	vec2 n_in15p2 = vec2(0.00000, 0.00000);
	vec2 n_out15p0 = fma(n_out17p0, n_out7p0, n_in15p2);


// DotProduct:8
	float n_out8p0 = dot(vec3(n_out17p0, 0.0), vec3(n_out15p0, 0.0));


	float n_out12p0;
// Expression:12
	n_out12p0 = 0.0;
	{
		n_out12p0 = pow(sin(fma(20.,n_out8p0,1.*TIME)),4) * 0.2 + 0.1;
	}


// VectorCompose:24
	vec4 n_out24p0 = vec4(n_out3p1, n_out3p2, n_out3p3, n_out12p0);


// ColorConstant:28
	vec4 n_out28p0 = vec4(1.000000, 1.000000, 1.000000, 0.000000);


	vec4 n_out26p0;
// Expression:26
	n_out26p0 = vec4(0.0, 0.0, 0.0, 0.0);
	{
		if (n_out27p0 >= 3 or (-1 <= n_out27p0 and n_out27p0 < 0)) {
				n_out26p0 = vec4(1);//mix(n_out24p0,n_out28p0,fract(n_out27p0));
		} else if (n_out27p0 < 0.995) {
				n_out26p0 = vec4(0.5);//mix(n_out28p0,n_out28p0,fract(n_out27p0));
		} else if (n_out27p0 < 1.995) {
				n_out26p0 = vec4(0.2);//mix(n_out28p0,n_out28p0,fract(n_out27p0));
		} else if (n_out27p0 < 2.995) {
				n_out26p0 = vec4(0.5);// mix(n_out28p0,n_out24p0,fract(n_out27p0));
		};
	}
	float n_out26p1 = n_out26p0.r;
	float n_out26p2 = n_out26p0.g;
	float n_out26p3 = n_out26p0.b;
	float n_out26p4 = n_out26p0.a;


// VectorCompose:29
	vec3 n_out29p0 = vec3(n_out26p1, n_out26p2, n_out26p3);


// Output:0
	COLOR.rgb = n_out29p0;
	COLOR.a = n_out26p4;


}
"
graph_offset = Vector2(-647.37, -113.653)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1080, -140)
nodes/fragment/3/node = SubResource("VisualShaderNodeColorConstant_giw4c")
nodes/fragment/3/position = Vector2(-320, -120)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_ghkgo")
nodes/fragment/6/position = Vector2(-1920, -120)
nodes/fragment/7/node = SubResource("VisualShaderNodeVec2Constant_acvkv")
nodes/fragment/7/position = Vector2(-1420, 160)
nodes/fragment/8/node = SubResource("VisualShaderNodeDotProduct_vijyk")
nodes/fragment/8/position = Vector2(-1020, -120)
nodes/fragment/12/node = SubResource("VisualShaderNodeExpression_in0m2")
nodes/fragment/12/position = Vector2(-820, -120)
nodes/fragment/12/size = Vector2(220, 360)
nodes/fragment/12/input_ports = "0,0,in;"
nodes/fragment/12/output_ports = "0,0,out;"
nodes/fragment/12/expression = "out = pow(sin(fma(20.,in,1.*TIME)),4) * 0.2 + 0.1;"
nodes/fragment/15/node = SubResource("VisualShaderNodeMultiplyAdd_xw18n")
nodes/fragment/15/position = Vector2(-1220, -80)
nodes/fragment/16/node = SubResource("VisualShaderNodeFloatFunc_etv6d")
nodes/fragment/16/position = Vector2(-1600, -80)
nodes/fragment/17/node = SubResource("VisualShaderNodeVectorCompose_3inrk")
nodes/fragment/17/position = Vector2(-1420, -120)
nodes/fragment/24/node = SubResource("VisualShaderNodeVectorCompose_vsu8i")
nodes/fragment/24/position = Vector2(-180, -120)
nodes/fragment/26/node = SubResource("VisualShaderNodeExpression_3gmuh")
nodes/fragment/26/position = Vector2(100, -120)
nodes/fragment/26/size = Vector2(640, 660)
nodes/fragment/26/input_ports = "0,0,weather;1,5,summer;2,5,autumn;3,5,winter;4,5,spring;"
nodes/fragment/26/output_ports = "0,5,colour;"
nodes/fragment/26/expression = "if (weather >= 3 or (-1 <= weather and weather < 0)) {
		colour = vec4(1);//mix(summer,autumn,fract(weather));
} else if (weather < 0.995) {
		colour = vec4(0.5);//mix(autumn,winter,fract(weather));
} else if (weather < 1.995) {
		colour = vec4(0.2);//mix(winter,spring,fract(weather));
} else if (weather < 2.995) {
		colour = vec4(0.5);// mix(spring,summer,fract(weather));
};"
nodes/fragment/27/node = SubResource("VisualShaderNodeFloatParameter_takvu")
nodes/fragment/27/position = Vector2(-420, -340)
nodes/fragment/28/node = SubResource("VisualShaderNodeColorConstant_glk66")
nodes/fragment/28/position = Vector2(-80, 240)
nodes/fragment/29/node = SubResource("VisualShaderNodeVectorCompose_mhea2")
nodes/fragment/29/position = Vector2(840, -160)
nodes/fragment/connections = PackedInt32Array(15, 0, 8, 1, 8, 0, 12, 0, 17, 0, 8, 0, 6, 2, 16, 0, 6, 1, 17, 0, 16, 0, 17, 1, 7, 0, 15, 1, 17, 0, 15, 0, 3, 1, 24, 0, 3, 2, 24, 1, 3, 3, 24, 2, 12, 0, 24, 3, 28, 0, 26, 2, 28, 0, 26, 3, 28, 0, 26, 4, 27, 0, 26, 0, 26, 4, 0, 1, 26, 1, 29, 0, 26, 2, 29, 1, 26, 3, 29, 2, 29, 0, 0, 0, 24, 0, 26, 1)
